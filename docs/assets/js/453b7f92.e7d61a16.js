"use strict";(self.webpackChunkzwyx_dev=self.webpackChunkzwyx_dev||[]).push([[8511],{2728:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var s=t(2105),i=t(4848),o=t(8453);const a={tags:["inotify","file system"]},r=void 0,c={authorsImageUrls:[]},l=[];function u(n){const e={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Check how many inotify watches are being used:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Get the procs sorted by the number of inotify watches\n# @author Carl-Erik Kopseng\n# @latest https://github.com/fatso83/dotfiles/blob/master/utils/scripts/inotify-consumers\n# Discussion leading up to answer: https://unix.stackexchange.com/questions/15509/whos-consuming-my-inotify-resources\n#\n# If you need ultimate speed, use https://github.com/fatso83/dotfiles/commit/inotify-consumers-v1-fastest\n# # Speed enhancements by Simon Matter <simon.matter@invoca.ch>\n#\n# A later PR introduced a significant slowdown to gain better output, but it is insignificant on most machines\n# See this for details: https://github.com/fatso83/dotfiles/pull/10#issuecomment-1122374716\n\nmain(){\n    printf "\\n%${WLEN}s  %${WLEN}s\\n" "INOTIFY" "INSTANCES"\n    printf "%${WLEN}s  %${WLEN}s\\n" "WATCHES" "PER   "\n    printf "%${WLEN}s  %${WLEN}s  %s\\n" " COUNT " "PROCESS "    "PID USER         COMMAND"\n    printf -- "------------------------------------------------------------\\n"\n    generateData\n}\n\nusage(){\n    cat << EOF\nUsage: $0 [--help|--limits]\n    -l, --limits    Will print the current related limits and how to change them\n    -h, --help      Show this help\nFYI:  Check out Michael Sartain\'s C++ take on this script. The native executable\n      is much faster, modern and feature rich. It can be found at\n      https://github.com/mikesart/inotify-info\nEOF\n}\n\nlimits(){\n    printf "\\nCurrent limits\\n-------------\\n"\n    sysctl fs.inotify.max_user_instances fs.inotify.max_user_watches\n\n    cat <<- EOF\nChanging settings permanently\n-----------------------------\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p # re-read config\nEOF\n}\n\ngenerateData() {\n    local -i PROC\n    local -i PID\n    local -i CNT\n    local -i INSTANCES\n    local -i TOT\n    local -i TOTINSTANCES\n    # read process list into cache\n    local PSLIST="$(ps ax -o pid,user=WIDE-COLUMN,command $COLSTRING)"\n    local INOTIFY="$(find /proc/[0-9]*/fdinfo -type f 2>/dev/null | xargs grep ^inotify 2>/dev/null)"\n    local INOTIFYCNT="$(echo "$INOTIFY" | cut -d "/" -s --output-delimiter=" "  -f 3 |uniq -c | sed -e \'s/:.*//\')"\n    # unique instances per process is denoted by number of inotify FDs\n    local INOTIFYINSTANCES="$(echo "$INOTIFY" | cut -d "/" -s --output-delimiter=" "   -f 3,5 | sed -e \'s/:.*//\'| uniq |awk \'{print $1}\' |uniq -c)"\n    local INOTIFYUSERINSTANCES="$(echo "$INOTIFY" | cut -d "/" -s --output-delimiter=" "   -f 3,5 | sed -e \'s/:.*//\' | uniq |\n    \t     while read PID FD; do echo $PID $FD $(grep -e "^ *${PID} " <<< "$PSLIST"|awk \'{print $2}\'); done | cut -d" "  -f 3 | sort | uniq -c |sort -nr)"\n    set -e\n\n    cat <<< "$INOTIFYCNT" |\n        {\n            while read -rs CNT PROC; do   # count watches of processes found\n                echo "${PROC},${CNT},$(echo "$INOTIFYINSTANCES" | grep " ${PROC}$" |awk \'{print $1}\')"\n            done\n        } |\n        grep -v ",0," |                  # remove entires without watches\n        sort -n -t "," -k 2,3 -r |         # sort to begin with highest numbers\n        {                                # group commands so that $TOT is visible in the printf\n\t    IFS=","\n            while read -rs PID CNT INSTANCES; do   # show watches and corresponding process info\n                printf "%$(( WLEN - 2 ))d  %$(( WLEN - 2 ))d     %s\\n" "$CNT" "$INSTANCES" "$(grep -e "^ *${PID} " <<< "$PSLIST")"\n                TOT=$(( TOT + CNT ))\n\t\tTOTINSTANCES=$(( TOTINSTANCES + INSTANCES))\n            done\n\t    # These stats should be per-user as well, since inotify limits are per-user..\n            printf "\\n%$(( WLEN - 2 ))d  %s\\n" "$TOT" "WATCHES TOTAL COUNT"\n# the total across different users is somewhat meaningless, not printing for now.\n#            printf "\\n%$(( WLEN - 2 ))d  %s\\n" "$TOTINSTANCES" "TOTAL INSTANCES COUNT"\n        }\n    echo ""\n    echo "INotify instances per user (e.g. limits specified by fs.inotify.max_user_instances): "\n    echo ""\n    (\n      echo "INSTANCES    USER"\n      echo "-----------  ------------------"\n      echo "$INOTIFYUSERINSTANCES"\n    ) | column -t\n    echo ""\n    exit 0\n}\n\n# get terminal width\ndeclare -i COLS=$(tput cols 2>/dev/null || echo 80)\ndeclare -i WLEN=10\ndeclare COLSTRING="--columns $(( COLS - WLEN ))" # get terminal width\n\nif [ "$1" = "--limits" -o "$1" = "-l" ]; then\n    limits\n    exit 0\nfi\n\nif [ "$1" = "--help" -o "$1" = "-h" ]; then\n    usage\n    exit 0\nfi\n\n# added this line and moved some declarations to allow for the full display instead of a truncated version\nif [ "$1" = "--full" -o "$1" = "-f" ]; then\n    unset COLSTRING\n    main\nfi\n\nif [ -n "$1" ]; then\n    printf "\\nUnknown parameter \'$1\'\\n" >&2\n    usage\n    exit 1\nfi\nmain\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://github.com/fatso83/dotfiles/blob/master/utils/scripts/inotify-consumers",children:"https://github.com/fatso83/dotfiles/blob/master/utils/scripts/inotify-consumers"})})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(o.Provider,{value:e},n.children)}},2105:n=>{n.exports=JSON.parse('{"permalink":"/til/2022/12/19/inotify watches","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2022-12-19-inotify watches.md","source":"@site/til/2022-12-19-inotify watches.md","title":"inotify watches","description":"Check how many inotify watches are being used:","date":"2022-12-19T00:00:00.000Z","tags":[{"inline":true,"label":"inotify","permalink":"/til/tags/inotify"},{"inline":true,"label":"file system","permalink":"/til/tags/file-system"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["inotify","file system"]},"unlisted":false,"prevItem":{"title":"xclip and xsel","permalink":"/til/2023/01/12/xclip and xsel"},"nextItem":{"title":"rsync and file renames","permalink":"/til/2022/12/19/rsync and file renames"}}')}}]);
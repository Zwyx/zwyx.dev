"use strict";(self.webpackChunkzwyx_dev=self.webpackChunkzwyx_dev||[]).push([[261],{1866:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var r=n(8250),a=n(4848),t=n(8453),o=n(4341),i=n(756);const d=n.p+"assets/images/p-59e0936ad3963b402dad61fbe18813b6.gif",l={slug:"shared-password-stores",title:"Multiple shared password stores with Git and pass",description:"Use pass to set up a complete, shared and segmented, professional password store.",image:"./main.webp",authors:["alex"],tags:["password","password manager","pass"]},c=void 0,h={image:n(9418).A,authorsImageUrls:[void 0]},p=[{value:"Retrieve a password",id:"retrieve-a-password",level:2},{value:"Set up more than one password store",id:"set-up-more-than-one-password-store",level:2},{value:"Share a password store",id:"share-a-password-store",level:2},{value:"Add a new password to the shared store",id:"add-a-new-password-to-the-shared-store",level:2},{value:"Give access to the password store to a new user",id:"give-access-to-the-password-store-to-a-new-user",level:2}];function u(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o._,{src:i.A,legend:"Password store layout example"}),"\n",(0,a.jsxs)(s.p,{children:["In this post, we will use ",(0,a.jsx)(s.code,{children:"pass"})," to set up a complete, shared and segmented, professional password store."]}),"\n","\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsxs)(s.p,{children:["This post contains ideas and suggestions for a more advanced use of ",(0,a.jsx)(s.code,{children:"pass"}),"; it's intended for people who already know its basic usage."]})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.p,{children:"Before all, why do I use a trivial command line tool instead of one of the many fancy password managers available?"}),"\n",(0,a.jsx)(s.p,{children:"Because I believe critical things need to be kept simple."}),"\n",(0,a.jsx)(s.p,{children:"They need to be open source and have proven themselves by being maintained, audited, and used by many."}),"\n",(0,a.jsx)(s.admonition,{type:"info",children:(0,a.jsxs)(s.p,{children:["Even a serious security company is capable of inadvertently exposing a backdoor on their users' machines ",(0,a.jsx)(s.a,{href:"https://bugs.chromium.org/p/project-zero/issues/detail?id=693&redir=1",children:"allowing remote code execution and the theft of your passwords"})," (\u2190 I really recommend the reading of this story)."]})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"pass"})," is ",(0,a.jsx)(s.a,{href:"https://git.zx2c4.com/password-store/tree/src/password-store.sh",children:"one bash script"})," relying on ",(0,a.jsx)(s.a,{href:"https://gnupg.org/",children:"GPG"}),". Both tools are open and have been used extensively for a while."]}),"\n",(0,a.jsxs)(s.p,{children:["There are some GUIs for ",(0,a.jsx)(s.code,{children:"pass"}),", some browser extensions, mobile apps, etc. but choose them carefully: the more we add, the larger the ",(0,a.jsx)(s.a,{href:"https://github.com/IJHack/QtPass/issues/338",children:"attack surface"})," becomes."]}),"\n",(0,a.jsxs)(s.p,{children:["I use Termux on Android, which provides ",(0,a.jsx)(s.code,{children:"pass"})," in its ",(0,a.jsx)(s.a,{href:"https://github.com/termux/termux-packages",children:"packages"}),". It doesn't autofill credentials, but apps and websites are good at remembering who you are these days, so I don't need to log in often."]}),"\n",(0,a.jsx)(s.h2,{id:"retrieve-a-password",children:"Retrieve a password"}),"\n",(0,a.jsx)(s.p,{children:"First, a little tweak for the retrieval of a password."}),"\n",(0,a.jsxs)(s.p,{children:["The default command \u2014 ",(0,a.jsx)(s.code,{children:"pass -c <password-name>"})," \u2014 outputs the password in the clipboard and clears it after 45 seconds."]}),"\n",(0,a.jsx)(s.p,{children:"However, I have a clipboard manager that keeps everything I put in the clipboard."}),"\n",(0,a.jsxs)(s.p,{children:["To prevent passwords from being recorded, I wrote a command that outputs them in the ",(0,a.jsx)(s.em,{children:"X selection"})," instead of the clipboard. To paste them, I click the middle mouse button, instead of using Ctrl-V."]}),"\n",(0,a.jsxs)(s.p,{children:["To do that, add the following in your ",(0,a.jsx)(s.code,{children:".zshrc"})," (you might have to make some modifications if you're using a different shell):"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'p() {\n\t# Insert the password into the X selection\n\t# (also called primary, see `man xclip`)\n\tpass $1 | head -n 1 | tr -d "\\n" | xclip\n\n\t# Countdown\n\tfor i in {5..1}; do\n\t\tprintf "\\r$i"\n\t\tsleep 1\n\tdone\n\n\t# Clear the selection\n\techo -n "" | xclip\n\n\techo "\\r\u2714"\n}\n\n# Associate the completer of `pass` to the command `p`, allowing\n# the Tab key to be used with `p` to autocomplete the passwords names\ncompdef _pass p\n\n# Note: use `p` only to retrieve an existing password,\n# not with other `pass` commands (`generate`, etc.)\n'})}),"\n",(0,a.jsx)(s.p,{children:"Here it is in action:"}),"\n","\n",(0,a.jsx)(o._,{src:d,alt:"The p command"}),"\n",(0,a.jsx)(s.h2,{id:"set-up-more-than-one-password-store",children:"Set up more than one password store"}),"\n",(0,a.jsxs)(s.p,{children:["It's possible to have two completely separated password stores by creating a new command for the second one. The new command, ",(0,a.jsx)(s.code,{children:"passpro"})," for instance, will use a different directory:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"passpro() {\n\t# Set a different password store directory,\n\t# then run `pass` with all the arguments received by `passpro`\n\tPASSWORD_STORE_DIR=~/.password-store-pro pass $@\n}\n\n_passpro() {\n\t# Same idea for the completer\n\tPASSWORD_STORE_DIR=~/.password-store-pro _pass\n}\n\n# Then we associate the two\ncompdef _passpro passpro\n\n# And we can have the same short command to retrieve a password:\npp() {\n\tPASSWORD_STORE_DIR=~/.password-store-pro p $@\n}\n\ncompdef _passpro pp\n"})}),"\n",(0,a.jsx)(s.admonition,{type:"tip",children:(0,a.jsxs)(s.p,{children:["Having two different pass commands is my preference, but there are other ways to have multiple stores. For instance, you could make use of ",(0,a.jsx)(s.code,{children:".gitignore"})," or git submodules to have the second store inside the first one."]})}),"\n",(0,a.jsx)(s.h2,{id:"share-a-password-store",children:"Share a password store"}),"\n",(0,a.jsx)(s.p,{children:"We can share a password store with many people, while still being able to fine tune who has access to what."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["We create a subfolder for each team, for instance a ",(0,a.jsx)(s.code,{children:"devs"})," subfolder and a ",(0,a.jsx)(s.code,{children:"support"})," subfolder:"]}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"~/.password-store-pro\n\u251c\u2500\u2500 devs\n\u2502   \u251c\u2500\u2500 databasePassword\n\u2502   \u251c\u2500\u2500 serverSshKey\n\u2502   \u2514\u2500\u2500 stackCredentials\n\u2514\u2500\u2500 support\n    \u251c\u2500\u2500 supportPlatformPassword\n    \u2514\u2500\u2500 supportEmailPassword\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Inside each, we put a ",(0,a.jsx)(s.code,{children:".gpg-id"})," file listing the PGP key UIDs of the persons having access to the content of this subfolder:"]}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"~/.password-store-pro\n\u251c\u2500\u2500 devs          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \u251c\u2500\u2500 .gpg-id \u2192 \u2502 Alice <alice@example.com> \u2502\n\u2502   \u2502             \u2502 Bob <bob@example.com>     \u2502\n\u2502   \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502   \u251c\u2500\u2500 databasePassword    \\\n\u2502   \u251c\u2500\u2500 serverSshKey         > Each file is encrypted\n\u2502   \u2514\u2500\u2500 stackCredentials    /  for Alice and Bob\n\u2514\u2500\u2500 support       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u251c\u2500\u2500 .gpg-id \u2192 \u2502 Alice <alice@example.com> \u2502\n    \u2502             \u2502 Carl <carl@example.com>   \u2502\n    \u2502             \u2502 David <david@example.com> \u2502\n    \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u251c\u2500\u2500 supportPlatformPassword   \\ Each file is encrypted for\n    \u2514\u2500\u2500 supportEmailPassword      / Alice, Carl and David\n"})}),"\n",(0,a.jsx)(s.p,{children:"And that's basically it."}),"\n",(0,a.jsx)(s.p,{children:"There are a few other things to help us:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["In the root directory, a ",(0,a.jsx)(s.code,{children:".public-keys"})," folder contains the public PGP keys of all the persons having access to the store. That allows the creation of new passwords that will be decryptable by the persons/teams we want."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:".gpg-id"})," file in the root directory lists who has access to the secrets in this directory \u2014 and any subfolder which doesn't have its own ",(0,a.jsx)(s.code,{children:".gpg-id"}),". We don't use it in this example."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["Finally, the bash script ",(0,a.jsx)(s.code,{children:"encrypt.sh"})," is used to display detailed information about the password store, and to reencrypt it when a new user is given access to the store. Indeed, when a new user is added, every passwords he will have access to needs to be reencrypted for his public key. This process is explain later in this article."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"So here's our complete, shared and segmented, professional password store:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"~/.password-store-pro\n\u251c\u2500\u2500 .public-keys\n\u2502   \u251c\u2500\u2500 alice.asc\n\u2502   \u251c\u2500\u2500 bob.asc\n\u2502   \u251c\u2500\u2500 carl.asc\n\u2502   \u2514\u2500\u2500 david.asc\n\u251c\u2500\u2500 devs          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \u251c\u2500\u2500 .gpg-id \u2192 \u2502 Alice <alice@example.com> \u2502\n\u2502   \u2502             \u2502 Bob <bob@example.com>     \u2502\n\u2502   \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502   \u251c\u2500\u2500 databasePassword\n\u2502   \u251c\u2500\u2500 serverSshKey\n\u2502   \u2514\u2500\u2500 stackCredentials\n\u251c\u2500\u2500 support       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \u251c\u2500\u2500 .gpg-id \u2192 \u2502 Alice <alice@example.com> \u2502\n\u2502   \u2502             \u2502 Carl <carl@example.com>   \u2502\n\u2502   \u2502             \u2502 David <david@example.com> \u2502\n\u2502   \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502   \u251c\u2500\u2500 supportPlatformPassword\n\u2502   \u2514\u2500\u2500 supportEmailPassword\n\u251c\u2500\u2500 .gpg-id\n\u2514\u2500\u2500 encrypt.sh\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The content of encrypt.sh can be found ",(0,a.jsx)(s.a,{href:"https://gist.github.com/Zwyx/aecea360db2c50a058a9b1f0c5287b45",children:"here"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"Now, let's see how to use the password store."}),"\n",(0,a.jsx)(s.h2,{id:"add-a-new-password-to-the-shared-store",children:"Add a new password to the shared store"}),"\n",(0,a.jsx)(s.p,{children:"Now that we have the structure of our shared store, let's create a password."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"First, we import the all public keys to our keyring:"}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"gpg --import ~/.password-store-pro/.public-keys/*.asc\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"And we trust them \u2014 the following needs to be done for each keys:"}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'gpg --edit-key "<key-uid>"\ngpg> trust\nYour decision? 5\ngpg> quit\n'})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Optionally, we create a new Git branch. As the password store is a Git repository, we can run Git commands on this repository with ",(0,a.jsx)(s.code,{children:"pass git"}),", for instance:"]}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"passpro git checkout -b new-password\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Choose in which subfolder to put the new password, and generate it:"}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"passpro generate -n devs/cloudPlatformCredentials 20\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Push the branch and create a pull request."}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"give-access-to-the-password-store-to-a-new-user",children:"Give access to the password store to a new user"}),"\n",(0,a.jsx)(s.p,{children:"As stated before, when a new user is added, every passwords he will have access to needs to be reencrypted for his public key."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["First, we add the user's public key to the ",(0,a.jsx)(s.code,{children:".public-keys"})," directory."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Then, we import it to our keyring:"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"gpg --import .public-keys/*.asc\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"We find its uid:"}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"gpg --list-keys\n"})}),"\n",(0,a.jsxs)(s.p,{children:["For instance, the uid can be: ",(0,a.jsx)(s.code,{children:"Elie <elie@example.com>"})]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"We trust the public key:"}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'gpg --edit-key "Elie <elie@example.com>"\ngpg> trust\nYour decision? 5\ngpg> quit\n'})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["We add the key's uid in the ",(0,a.jsx)(s.code,{children:".gpg-id"})," file of each subfolder the new user needs to have access to; for instance, let's say that the new user is a developer, we add the key's uid in ",(0,a.jsx)(s.code,{children:"devs/.gpg-id"}),":"]}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"Alice <alice@example.com>\nBob <bob@example.com>\nElie <elie@example.com>\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"We now reencrypt all passwords and secrets for the new user:"}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"./encrypt.sh devs\n"})}),"\n",(0,a.jsxs)(s.p,{children:["This will list the persons for whom the ",(0,a.jsx)(s.code,{children:"devs"})," subfolder will be encrypted, and ask you to confirm:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"Password store root directory:\n\t'/home/user/.password-store-pro'\n\n1 subfolders will be encrypted.\n\n'devs' will be encrypted for:\n\tAlice <alice@example.com>\n\tBob <bob@example.com>\n\tElie <elie@example.com>\n\nProceed? [y/N]\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"./encrypt.sh"})," can also be run without any arguments, to reencrypt the whole store. However, remember that you need access to a password in order to be able to encrypt it for a new user, as you need to decrypt it first."]}),"\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsx)(s.p,{children:"Decrypting passwords stays as easy than it is with a personal password store. Note that Windows users who only need read access to the passwords can install Gpg4win\u200a-\u200ainstead of a non-official version of Pass."})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.p,{children:"I hope you enjoyed this article, have fun with Pass!"})]})}function m(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},4341:(e,s,n)=>{n.d(s,{_:()=>p});var r=n(4164);const a="imageWrapper_u91s",t="withLegend_q8O0",o="frame_zT4L",i="visible_KgQe",d="image_Y_cJ",l="legend_xj0V";var c=n(4848);const h=({children:e})=>(0,c.jsx)("div",{className:l,children:e}),p=({src:e,alt:s,width:n,height:l,withFrame:p,legend:u,borderRadius:m,children:w})=>{const x=u||w;return(0,c.jsxs)("div",{className:(0,r.A)(a,x&&t),children:[(0,c.jsx)("div",{style:{borderRadius:m},className:(0,r.A)(o,p&&i),children:(0,c.jsx)("img",{style:{borderRadius:m},className:d,src:e,alt:s||("string"==typeof x?x:""),width:n,height:l})}),x&&(0,c.jsx)(h,{children:x})]})}},9418:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/main-47cd28480cb4393dd05f6181fe258cf5.webp"},756:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/main-47cd28480cb4393dd05f6181fe258cf5.webp"},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>i});var r=n(6540);const a={},t=r.createContext(a);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(t.Provider,{value:s},e.children)}},8250:e=>{e.exports=JSON.parse('{"permalink":"/blog/shared-password-stores","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/blog/2021-06-27-shared-password-stores/index.mdx","source":"@site/blog/2021-06-27-shared-password-stores/index.mdx","title":"Multiple shared password stores with Git and pass","description":"Use pass to set up a complete, shared and segmented, professional password store.","date":"2021-06-27T00:00:00.000Z","tags":[{"inline":true,"label":"password","permalink":"/blog/tags/password"},{"inline":true,"label":"password manager","permalink":"/blog/tags/password-manager"},{"inline":true,"label":"pass","permalink":"/blog/tags/pass"}],"readingTime":6.84,"hasTruncateMarker":true,"authors":[{"name":"Alex","title":"Web developer","email":"alex@zwyx.dev","url":"https://github.com/Zwyx","imageURL":"https://github.com/zwyx.png","key":"alex","page":null}],"frontMatter":{"slug":"shared-password-stores","title":"Multiple shared password stores with Git and pass","description":"Use pass to set up a complete, shared and segmented, professional password store.","image":"./main.webp","authors":["alex"],"tags":["password","password manager","pass"]},"unlisted":false,"prevItem":{"title":"Tidy up a Git repo by archiving branches","permalink":"/blog/archiving-git-branches"},"nextItem":{"title":"NFC on Android with React and TypeScript using Capacitor or Cordova","permalink":"/blog/react-nfc"}}')}}]);
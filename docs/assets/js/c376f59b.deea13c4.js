"use strict";(self.webpackChunkzwyx_dev=self.webpackChunkzwyx_dev||[]).push([[4664],{6370:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>p});var i=t(2133),a=t(4848),r=t(8453),o=t(4341),s=t(3947);const c=t.p+"assets/images/nfc-unavailable-e22021c93b3afd41473a675479f36c9c.webp",d={slug:"react-nfc",title:"NFC on Android with React and TypeScript using Capacitor or Cordova",description:"Hybrid mobile apps are a great way to add native mobile features to an existing responsive web app.",image:"./react-nfc.webp",authors:["alex"],tags:["nfc","typescript","react","capacitor","cordova"]},l=void 0,h={image:t(2369).A,authorsImageUrls:[void 0]},p=[{value:"Web App",id:"web-app",level:2},{value:"Mobile Wrappers",id:"mobile-wrappers",level:2},{value:"Preparing the Android device",id:"preparing-the-android-device",level:3},{value:"Capacitor",id:"capacitor",level:3},{value:"Resources with Capacitor",id:"resources-with-capacitor",level:4},{value:"Cordova",id:"cordova",level:3},{value:"Notes",id:"notes",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.admonition,{title:"Warning: this article is old!",type:"danger",children:(0,a.jsx)(n.p,{children:"This article has been written in 2019. I stopped working with NFC on mobile a few years later."})}),"\n",(0,a.jsx)(o._,{src:s.A,alt:"React NFC"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://capacitor.ionicframework.com/",children:"Ionic Capacitor"})," and ",(0,a.jsx)(n.a,{href:"https://cordova.apache.org/",children:"Apache Cordova"})," are two common wrappers to create a hybrid mobile application from a web application. The main advantage over a native mobile app is the re-usability of the code \u2014 and the development languages being HTML, CSS, and JavaScript, if we like them."]}),"\n","\n",(0,a.jsx)(n.p,{children:"However, hybrid apps are not always the best choice and some research is necessary to determine which technology is best for a particular purpose."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["One thing to keep in mind though, is that using a mobile wrapper to create a hybrid app which is nothing more than a shell for a website, is ",(0,a.jsx)(n.a,{href:"https://stackoverflow.com/questions/5478848/does-apple-reject-mobile-web-shell-applications",children:"not well accepted"}),"."]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Let's say we have a nice responsive web app which works already great on a mobile browser, and which would be even greater if it could use NFC features on mobile devices."}),"\n",(0,a.jsxs)(n.p,{children:["As we cannot access NFC from a web browser (",(0,a.jsx)(n.a,{href:"https://w3c.github.io/web-nfc/",children:"yet"}),"), we need to create a mobile app."]}),"\n",(0,a.jsx)(n.p,{children:"As our web app is already designed to be displayed well on small screens (responsive), creating a hybrid mobile app from it will be much easier and quicker than recreating a native mobile app from scratch (or more than one: one for each platform we want to support\u2026)."}),"\n",(0,a.jsxs)(n.p,{children:["To demonstrate this, we will start by ",(0,a.jsx)(n.a,{href:"https://create-react-app.dev/",children:"creating a React app"})," \u2014 with TypeScript \u2014 add the ",(0,a.jsx)(n.a,{href:"https://github.com/chariotsolutions/phonegap-nfc",children:"PhoneGap NFC plugin"}),", then wrap our app with Capacitor or Cordova. We will need Node and npm (use a Node version manager, like ",(0,a.jsx)(n.a,{href:"https://github.com/nvm-sh/nvm",children:"nvm"}),"), the Android SDK and Android Studio."]}),"\n",(0,a.jsx)(n.h2,{id:"web-app",children:"Web App"}),"\n",(0,a.jsx)(n.p,{children:"First, we create a new React app by running:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx create-react-app react-nfc --typescript\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"npx"})," allows to execute npm package binaries without having to install them."]})}),"\n",(0,a.jsx)(n.p,{children:"Then we jump in the newly created folder and install PhoneGap NFC and its types for TypeScript:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd react-nfc\nnpm i phonegap-nfc\nnpm i --save-dev @types/phonegap-nfc\n"})}),"\n",(0,a.jsx)(n.p,{children:"The PhoneGap NFC stuff will be accessible globally, so we don't need any imports in our code."}),"\n",(0,a.jsxs)(n.p,{children:["Now we open ",(0,a.jsx)(n.code,{children:"src/App.tsx"})," and we replace its content by the following code, which is going to initialise NFC, invite the user to open the phone settings if NFC is not enabled, and read the content of an NFC tag (PhoneGap NFC offers plenty of other features documented ",(0,a.jsx)(n.a,{href:"https://github.com/chariotsolutions/phonegap-nfc",children:"here"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="src/App.tsx"',children:'import React from "react";\nimport "./App.css";\n\n/** Type for the possible steps of the app */\ntype TStep =\n\t| "initializing"\n\t| "noNfc"\n\t| "nfcNotEnabled"\n\t| "waitingForNfcEnabled"\n\t| "waitingForTag"\n\t| "cancelled"\n\t| "tagRead";\n\nconst App: React.FC = () => {\n\tconst [step, setStep] = React.useState<TStep>("initializing");\n\tconst [tagContent, setTagContent] = React.useState("");\n\n\t// Initialize NFC when the app is started\n\tReact.useEffect(initializeNfc, []);\n\n\tfunction initializeNfc() {\n\t\t// If nfc is undefined, NFC is not available on this device, or\n\t\t// the app is running in a web browser\n\t\tif (typeof nfc !== "undefined") {\n\t\t\t// Register an event listener\n\t\t\tnfc.addNdefListener(\n\t\t\t\tonNdefEvent, // The callback function for the event listener\n\t\t\t\t() => setStep("waitingForTag"), // Success \u2192 We\'re waiting for an event\n\t\t\t\t() => setStep("nfcNotEnabled"), // Error \u2192 NFC must not be enabled\n\t\t\t);\n\t\t} else {\n\t\t\tsetStep("noNfc");\n\t\t}\n\t}\n\n\tfunction onGoToSettingsClick() {\n\t\tif (typeof nfc !== "undefined") {\n\t\t\t// Ask the device to open the NFC settings for the user\n\t\t\tnfc.showSettings(\n\t\t\t\t() => setStep("waitingForNfcEnabled"),\n\t\t\t\t() => alert("An error occurred while trying to open the NFC Settings."),\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction onNdefEvent(e: PhoneGapNfc.TagEvent) {\n\t\t// Unregister the event listener\n\t\tnfc.removeNdefListener(onNdefEvent);\n\n\t\tsetTagContent(\n\t\t\t// Retrieve the payload of the tag and decode it\n\t\t\t// https://www.oreilly.com/library/view/beginning-nfc/9781449324094/ch04.html\n\t\t\tndef.textHelper.decodePayload(\n\t\t\t\t(e as PhoneGapNfc.NdefTagEvent).tag.ndefMessage[0].payload,\n\t\t\t),\n\t\t);\n\n\t\tsetStep("tagRead");\n\t}\n\n\tfunction onStopClick() {\n\t\tif (typeof nfc !== "undefined") {\n\t\t\t// Unregister the event listener\n\t\t\tnfc.removeNdefListener(onNdefEvent);\n\t\t}\n\n\t\tsetStep("cancelled");\n\t}\n\n\treturn (\n\t\t<div className="nfc">\n\t\t\t{step === "initializing" ? (\n\t\t\t\t<div>Initializing...</div>\n\t\t\t) : step === "noNfc" ? (\n\t\t\t\t<div>\n\t\t\t\t\tThe device you are using doesn\'t appear to have NFC; or, the\n\t\t\t\t\tPhoneGap-NFC plugin hasn\'t been set up correctly.\n\t\t\t\t</div>\n\t\t\t) : step === "nfcNotEnabled" ? (\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tNFC is not enabled on your device. Click the button bellow to open\n\t\t\t\t\t\tyour device\'s settings, then activate NFC.\n\t\t\t\t\t</div>\n\t\t\t\t\t<button onClick={onGoToSettingsClick}>Go to NFC Settings</button>\n\t\t\t\t</div>\n\t\t\t) : step === "waitingForNfcEnabled" ? (\n\t\t\t\t<div>\n\t\t\t\t\t<div>Please click the button below once you have enabled NFC.</div>\n\t\t\t\t\t<button onClick={initializeNfc}>Initialize NFC Reader</button>\n\t\t\t\t</div>\n\t\t\t) : step === "waitingForTag" ? (\n\t\t\t\t<div>\n\t\t\t\t\t<div>Scan a NFC Tag to see its content</div>\n\t\t\t\t\t<button onClick={onStopClick}>Stop NFC Reader</button>\n\t\t\t\t</div>\n\t\t\t) : step === "tagRead" ? (\n\t\t\t\t<div>\n\t\t\t\t\t<div>Tag scanned! Here it\'s content:</div>\n\t\t\t\t\t<div>{tagContent}</div>\n\t\t\t\t\t<button onClick={onStopClick}>Stop NFC Reader</button>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t<div>Bye!</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default App;\n'})}),"\n",(0,a.jsxs)(n.p,{children:["We add some styling in ",(0,a.jsx)(n.code,{children:"App.css"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",metastring:'title="App.css"',children:".nfc {\n\theight: 100vh;\n\twidth: 100vw;\n\tbackground-color: #21252b;\n\tcolor: #abb2bf;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\ttext-align: center;\n}\n\n.nfc div {\n\tpadding: 8px 16px;\n}\n\nbutton {\n\tmargin: 16px;\n\tborder: none;\n\tborder-radius: 3px;\n\tpadding: 8px 12px;\n\tbackground-color: #61afef;\n\tcolor: #21252b;\n\tcursor: pointer;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"We can now build the project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And that's it for our app. The full project can be found ",(0,a.jsx)(n.a,{href:"https://github.com/Zwyx/react-nfc",children:"here"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"mobile-wrappers",children:"Mobile Wrappers"}),"\n",(0,a.jsx)(n.p,{children:"Now, we are going to wrap our web app to create an Android one. Once with Capacitor, once with Cordova (this is twice the same thing, we only do it to show case the two solutions)."}),"\n",(0,a.jsx)(n.h3,{id:"preparing-the-android-device",children:"Preparing the Android device"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Activate the Developer Mode: open the Android settings, go in ",(0,a.jsx)(n.strong,{children:"System"})," \u2192 ",(0,a.jsx)(n.strong,{children:"About device"}),", then tap ",(0,a.jsx)(n.strong,{children:"Build number"})," quickly seven times."]}),"\n",(0,a.jsxs)(n.li,{children:["Activate USB Debugging: in ",(0,a.jsx)(n.strong,{children:"Settings"})," \u2192 ",(0,a.jsx)(n.strong,{children:"System"})," \u2192 ",(0,a.jsx)(n.strong,{children:"Developer options"}),", turn ",(0,a.jsx)(n.strong,{children:"USB debugging"})," ON."]}),"\n",(0,a.jsx)(n.li,{children:"Connect the device to the computer."}),"\n",(0,a.jsxs)(n.li,{children:["If a notification ",(0,a.jsx)(n.strong,{children:"USB charging this device"})," appears, tap on it and select ",(0,a.jsx)(n.strong,{children:"Transfer files"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Answer ",(0,a.jsx)(n.strong,{children:"OK"})," when Android asks ",(0,a.jsx)(n.strong,{children:"Allow USB debugging?"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"capacitor",children:"Capacitor"}),"\n",(0,a.jsxs)(n.p,{children:["We run the following commands to install Capacitor, initialise it for our web app (our built app files are located in the ",(0,a.jsx)(n.code,{children:"build"})," folder), and add the Android platform to our project:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm i @capacitor/core @capacitor/cli\nnpx cap init --web-dir build\nnpx cap add android\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["If an error occurs, see the first point in the ",(0,a.jsx)(n.a,{href:"#notes",children:(0,a.jsx)(n.strong,{children:"Notes"})})," section below."]})}),"\n",(0,a.jsxs)(n.p,{children:["We can now start Android Studio, open the newly created ",(0,a.jsx)(n.code,{children:"android"})," folder as a project, wait for the scripts execution to finish, then click ",(0,a.jsx)(n.strong,{children:"Run"})," \u2192 ",(0,a.jsx)(n.strong,{children:"Run 'app'"})," to execute our app on our device."]}),"\n","\n",(0,a.jsx)("div",{style:{textAlign:"center"},children:(0,a.jsx)(o._,{src:c,width:"80%",legend:"Our web app on an Android device with NFC not enabled"})}),"\n",(0,a.jsx)(n.p,{children:"From now on, if we make changes to our web app, we just need to run the following two commands to rebuild the app and update the Capacitor project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run build\nnpx cap sync\n"})}),"\n",(0,a.jsxs)(n.p,{children:["(If Android Studio is a bit lost, ",(0,a.jsx)(n.strong,{children:"Project"})," \u2192 ",(0,a.jsx)(n.strong,{children:"Rebuild"})," might help \u2014 if it is still lost, closing the project and reopen the ",(0,a.jsx)(n.code,{children:"android"})," folder should work. Likewise, unplugging and plugging back the device might sometimes help is the Android debugger doesn't recognise it.)"]}),"\n",(0,a.jsx)(n.h4,{id:"resources-with-capacitor",children:"Resources with Capacitor"}),"\n",(0,a.jsxs)(n.p,{children:["The app logo and splash screen are located in the ",(0,a.jsx)(n.code,{children:"android/app/src/main/res folder"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To create a new logo, in Android Studio, right click on the ",(0,a.jsx)(n.code,{children:"res"})," folder then select ",(0,a.jsx)(n.strong,{children:"New"})," \u2192 ",(0,a.jsx)(n.strong,{children:"Image Asset"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To change the splash screen, generate the images using a tool like ",(0,a.jsx)(n.a,{href:"https://apetools.webprofusion.com/",children:"this one"}),", then place them in the ",(0,a.jsx)(n.code,{children:"res"})," folder."]}),"\n",(0,a.jsx)(n.h3,{id:"cordova",children:"Cordova"}),"\n",(0,a.jsx)(n.p,{children:"Cordova requires a few tweaks in the web app itself."}),"\n",(0,a.jsxs)(n.p,{children:["First, we need to replace the following line in ",(0,a.jsx)(n.code,{children:"src/index.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'ReactDOM.render(<App />, document.getElementById("root"));\n'})}),"\n",(0,a.jsx)(n.p,{children:"by:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'document.addEventListener(\n\t"deviceready",\n\t() => ReactDOM.render(<App />, document.getElementById("root")),\n\tfalse,\n);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then, we need to add the following parameter in ",(0,a.jsx)(n.code,{children:"package.json"})," \u2014 at the same level of ",(0,a.jsx)(n.code,{children:"name"}),", ",(0,a.jsx)(n.code,{children:"version"}),", etc.:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'"homepage" : "./",\n'})}),"\n",(0,a.jsx)(n.p,{children:"We can now rebuild the app:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now, we need to set up our environment:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Create the ",(0,a.jsx)(n.code,{children:"ANDROID_SDK_ROOT"})," variable"]}),"\n",(0,a.jsxs)(n.li,{children:["Add the ",(0,a.jsx)(n.code,{children:"bin"})," folder of graddle in the ",(0,a.jsx)(n.code,{children:"PATH"})]}),"\n",(0,a.jsx)(n.li,{children:"Make sure the graddle executable is actually executable"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Replace the ",(0,a.jsx)(n.code,{children:"<...>"})," in the following commands before running them:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"export ANDROID_SDK_ROOT=<path-to-the-android-sdk>\nexport PATH=$PATH:<path-to-android-studio>/gradle/gradle-<version>/bin\nchmod +x <path-to-android-studio>/gradle/gradle-<version>/bin/gradle\n"})}),"\n",(0,a.jsx)(n.p,{children:"We can now create our Cordova project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx cordova create Cordova com.example ReactNfc\ncd Cordova\nnpx cordova plugin add phonegap-nfc\nnpx cordova platform add android\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["If an error occurs, see the second point in the ",(0,a.jsx)(n.a,{href:"#notes",children:(0,a.jsx)(n.strong,{children:"Notes"})})," section below."]})}),"\n",(0,a.jsxs)(n.p,{children:["We place our web app in the Cordova project by copying the content of the ",(0,a.jsx)(n.code,{children:"build"})," folder in the ",(0,a.jsx)(n.code,{children:"Cordova/www"})," folder (after having deleted everything in ",(0,a.jsx)(n.code,{children:"Cordova/www"}),"). We also need to add the following line in ",(0,a.jsx)(n.code,{children:"index.html"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<script src="cordova.js"><\/script>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["As ",(0,a.jsx)(n.code,{children:"index.html"})," is minified, to make it simple, we just paste this line at the end of the file, just before the ",(0,a.jsx)(n.code,{children:"</body></html>"})," tags. So the file ends by:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<script src="cordova.js"><\/script></body></html>\n'})}),"\n",(0,a.jsx)(n.p,{children:"That's it! Cordova requires a few more tweaks than Capacitor, but we now just have to run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx cordova run\n"})}),"\n",(0,a.jsx)(n.p,{children:"to launch our app on our device!"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Hopefully this article has given you the basics to create a hybrid mobile app from a web app and use a native feature with it such as NFC. Happy coding!"}),"\n",(0,a.jsxs)(n.p,{children:["Oh, and if you are going to use a package often, you might want to install it instead of using ",(0,a.jsx)(n.code,{children:"npx"}),", especially Cordova which can take a while to start. It's recommended to install it locally in the project folder."]}),"\n",(0,a.jsxs)(n.p,{children:["To do so, first create the Cordova project with ",(0,a.jsx)(n.code,{children:"npx"})," then jump in the ",(0,a.jsx)(n.code,{children:"Cordova"})," folder and run:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm i cordova\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now open the file ",(0,a.jsx)(n.code,{children:"package.json"})," \u2014 still in the Cordova folder \u2014 and add the following script in the ",(0,a.jsx)(n.code,{children:'"scripts"'})," section:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'"cordova": "node_modules/cordova/bin/cordova"\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can now run, for instance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run cordova run\n"})}),"\n",(0,a.jsx)(n.p,{children:"To install Cordova globally, you can run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo npm install -g cordova\n"})}),"\n",(0,a.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["An error occurred when I was initialising Capacitor with the PhoneGap NFC plugin. I had to open the file ",(0,a.jsx)(n.code,{children:"node_modules/@capacitor/cli/dist/android/update.js"})," and replace line ",(0,a.jsx)(n.code,{children:"208"})," from:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const pathParts = getPathParts(configElement.$.parent);\n"})}),"\n",(0,a.jsx)(n.p,{children:"to:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const pathParts = getPathParts(\n\tconfigElement.$.parent || configElement.$.target,\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This problem ",(0,a.jsx)(n.a,{href:"https://github.com/ionic-team/capacitor/pull/1794/files",children:"has been fixed"})," already, it will probably be pushed on NPM with the next update of Capacitor."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["An error occurred when I was initialising Cordova with the PhoneGap NFC plugin. I had to open the file ",(0,a.jsx)(n.code,{children:"Cordova/plugins/phonegap-nfc/plugin.xml"})," and comment out the following section (starting at line ",(0,a.jsx)(n.code,{children:"39"}),"):"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<edit-config file="AndroidManifest.xml" target="/manifest/uses-sdk" mode="merge">\n    <uses-sdk android:minSdkVersion="19" />\n</edit-config>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["then delete the folder ",(0,a.jsx)(n.code,{children:"Cordova/platforms/android"})," and execute again:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx cordova platform add android\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This error ",(0,a.jsx)(n.a,{href:"https://github.com/chariotsolutions/phonegap-nfc/issues/371",children:"has been identified"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},4341:(e,n,t)=>{t.d(n,{_:()=>p});var i=t(4164);const a="imageWrapper_u91s",r="withLegend_q8O0",o="frame_zT4L",s="visible_KgQe",c="image_Y_cJ",d="legend_xj0V";var l=t(4848);const h=({children:e})=>(0,l.jsx)("div",{className:d,children:e}),p=({src:e,alt:n,width:t,height:d,withFrame:p,legend:g,borderRadius:u,children:x})=>{const f=g||x;return(0,l.jsxs)("div",{className:(0,i.A)(a,f&&r),children:[(0,l.jsx)("div",{style:{borderRadius:u},className:(0,i.A)(o,p&&s),children:(0,l.jsx)("img",{style:{borderRadius:u},className:c,src:e,alt:n||("string"==typeof f?f:""),width:t,height:d})}),f&&(0,l.jsx)(h,{children:f})]})}},2369:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/react-nfc-2df0d3ca1a564f805081146463d38c26.webp"},3947:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/react-nfc-2df0d3ca1a564f805081146463d38c26.webp"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},2133:e=>{e.exports=JSON.parse('{"permalink":"/blog/react-nfc","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/blog/2019-10-05-react-nfc/index.mdx","source":"@site/blog/2019-10-05-react-nfc/index.mdx","title":"NFC on Android with React and TypeScript using Capacitor or Cordova","description":"Hybrid mobile apps are a great way to add native mobile features to an existing responsive web app.","date":"2019-10-05T00:00:00.000Z","tags":[{"inline":true,"label":"nfc","permalink":"/blog/tags/nfc"},{"inline":true,"label":"typescript","permalink":"/blog/tags/typescript"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"capacitor","permalink":"/blog/tags/capacitor"},{"inline":true,"label":"cordova","permalink":"/blog/tags/cordova"}],"readingTime":9.09,"hasTruncateMarker":true,"authors":[{"name":"Alex","title":"Web developer","email":"alex@zwyx.dev","url":"https://github.com/Zwyx","imageURL":"https://github.com/zwyx.png","key":"alex","page":null}],"frontMatter":{"slug":"react-nfc","title":"NFC on Android with React and TypeScript using Capacitor or Cordova","description":"Hybrid mobile apps are a great way to add native mobile features to an existing responsive web app.","image":"./react-nfc.webp","authors":["alex"],"tags":["nfc","typescript","react","capacitor","cordova"]},"unlisted":false,"prevItem":{"title":"Multiple shared password stores with Git and pass","permalink":"/blog/shared-password-stores"}}')}}]);
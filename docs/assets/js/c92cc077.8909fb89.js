"use strict";(self.webpackChunkzwyx_dev=self.webpackChunkzwyx_dev||[]).push([[5609],{6099:t=>{t.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/08/01/Custom clone function in JavaScript","metadata":{"permalink":"/til/2025/08/01/Custom clone function in JavaScript","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2025-08-01-Custom clone function in JavaScript.mdx","source":"@site/til/2025-08-01-Custom clone function in JavaScript.mdx","title":"Custom clone function in JavaScript","description":"We can easily clone an object in JavaScript using the structuredClone method, Ramda\'s clone, or Lodash\'s cloneDeep.","date":"2025-08-01T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/til/tags/javascript"},{"inline":true,"label":"clone","permalink":"/til/tags/clone"},{"inline":true,"label":"bun","permalink":"/til/tags/bun"},{"inline":true,"label":"node","permalink":"/til/tags/node"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Custom clone function in JavaScript","tags":["javascript","clone","bun","node"]},"unlisted":false,"nextItem":{"title":"DDC/CI","permalink":"/til/2025/02/05/ddc-ci"}},"content":"We can easily clone an object in JavaScript using the [`structuredClone`](https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone) method, Ramda\'s [`clone`](https://ramdajs.com/docs/#clone), or Lodash\'s [`cloneDeep`](https://lodash.com/docs/4.17.15#cloneDeep).\\n\\nHowever, writing our own cloning function can lead to much better performances.\\n\\nFor the Codewars kata [Win at Skyjo](https://www.codewars.com/kata/688b957a12698cb53d5959fe), the function [`getPlayersColumnsClone`](https://github.com/Zwyx/codewars-skyjo-resources/blob/df3cdcc47cf16b8904bd5f3fae015f25bc298cb0/src/utils.ts#L59) deep clones an array of five arrays, themselves arrays of four arrays, themselves arrays of three arrays of simple objects with four properties.\\n\\nHere\'s how this function performs 100,000 cloning operations compare to other methods:\\n\\nexport const durationData = [\\n\\t{ title: \\"getPlayersColumnsClone\\", duration: 0.06 },\\n\\t{ title: \\"structuredClone\\", duration: 2.54 },\\n\\t{ title: \\"Lodash.cloneDeep\\", duration: 4.68 },\\n\\t{ title: \\"Ramda.clone\\", duration: 8.62 },\\n];\\n\\nexport const longestDuration = Math.max(\\n\\t...durationData.map(({ duration }) => duration),\\n);\\n\\n{durationData.map(({ title, duration }) => (\\n\\n<>\\n\\t<code>{title}</code> {duration} s\\n\\n    <div style={{ marginTop: \\"2px\\", marginBottom: \\"12px\\", display: \\"flex\\", alignItems: \\"center\\" }}>\\n    \\t<span\\n    \\t\\tstyle={{\\n    \\t\\t\\tdisplay: \\"inline-block\\",\\n    \\t\\t\\twidth: `${duration * 100 / longestDuration}%`,\\n    \\t\\t\\theight: \\"8px\\",\\n    \\t\\t\\tbackgroundColor: \\"var(--ifm-link-color)\\",\\n    \\t\\t\\t\\tborderRadius: \\"5px\\"\\n    \\t\\t}}\\n    \\t/>\\n    </div>\\n\\n</>\\n\\n))}\\n\\n<details>\\n<summary>Benchmark implementation</summary>\\n\\n```ts\\nimport Lodash from \\"lodash\\";\\nimport * as Ramda from \\"ramda\\";\\n\\nconst NUMBER_OF_PLAYERS = 5;\\nconst NUMBER_OF_COLUMNS = 4;\\nconst NUMBER_OF_ROWS = 3;\\n\\nconst playersColumns = Array.from({ length: NUMBER_OF_PLAYERS }, () =>\\n\\tArray.from({ length: NUMBER_OF_COLUMNS }, (_, x) =>\\n\\t\\tArray.from({ length: NUMBER_OF_ROWS }, (__, y) => ({\\n\\t\\t\\tx,\\n\\t\\t\\ty,\\n\\t\\t\\tcard: 0,\\n\\t\\t\\tvisible: false,\\n\\t\\t})),\\n\\t),\\n);\\n\\nconst cloneFunctions = [\\n\\tRamda.clone,\\n\\tLodash.cloneDeep,\\n\\tstructuredClone,\\n\\tgetPlayersColumnsClone,\\n];\\n\\nfor (const cloneFunction of cloneFunctions) {\\n\\tconsole.info(`Cloning with \'${cloneFunction.name}\'...`);\\n\\n\\tconst startTime = performance.now();\\n\\n\\tfor (let i = 0; i < 100_000; i++) {\\n\\t\\tcloneFunction(playersColumns);\\n\\t}\\n\\n\\tconst duration = Math.round((performance.now() - startTime) / 10) / 100;\\n\\n\\tconsole.info(`Took ${duration} s`);\\n}\\n```\\n\\n</details>"},{"id":"/2025/02/05/ddc-ci","metadata":{"permalink":"/til/2025/02/05/ddc-ci","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2025-02-05-ddc-ci.md","source":"@site/til/2025-02-05-ddc-ci.md","title":"DDC/CI","description":"The DDC/CI standard (introduced in 1998!) allows a computer to send commands to external monitors.","date":"2025-02-05T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"DDC/CI","tags":[]},"unlisted":false,"prevItem":{"title":"Custom clone function in JavaScript","permalink":"/til/2025/08/01/Custom clone function in JavaScript"},"nextItem":{"title":"Annotated and lightweight tags","permalink":"/til/2025/01/24/Annotated and lightweight tags"}},"content":"The [DDC/CI](https://en.wikipedia.org/wiki/Display_Data_Channel#DDC/CI) standard (introduced in 1998!) allows a computer to send commands to external monitors.\\n\\nFor instance, we can programmatically set the brightness of all our monitors:\\n\\n- install [ddcutil](https://github.com/rockowitz/ddcutil):\\n\\n```bash\\nsudo apt install ddcutil\\n```\\n\\n- create a shortcut associated with a script to switch between bright and dim:\\n\\n```bash\\nif [ \\"$(cat /sys/class/backlight/intel_backlight/brightness)\\" = \\"960\\" ]; then\\n\\t# Set laptop monitor\'s brightness\\n\\techo 57984 | sudo tee /sys/class/backlight/intel_backlight/brightness\\n\\t# Set external monitors\' brightness\\n\\tsudo ddcutil setvcp 0x10 60\\nelse\\n\\techo 960 | sudo tee /sys/class/backlight/intel_backlight/brightness\\n\\tsudo ddcutil setvcp 0x10 0\\nfi\\n```\\n\\n`0x10` is the code for `brightness`. Run `sudo ddcutil detect` to list the monitors `ddcutil` can work with, and `sudo ddcutil getvcp all` to list the features available.\\n\\n:::info\\n\\nBecause `sudo` is required, the shortcut\'s command needs to use `pkexec`:\\n\\n```bash\\npkexec /path/to/switch-brightness.sh\\n```\\n\\n:::\\n\\nAnd by the way, here\'s another script, to switch between light and dark themes:\\n\\n```bash\\nif [ \\"$(gsettings get org.gnome.desktop.interface gtk-theme)\\" = \\"\'Yaru\'\\" ]; then\\n\\tgsettings set org.gnome.desktop.interface color-scheme \\"prefer-dark\\"\\n\\tgsettings set org.gnome.desktop.interface gtk-theme \\"Yaru-dark\\"\\nelse\\n\\tgsettings set org.gnome.desktop.interface color-scheme \\"prefer-light\\"\\n\\tgsettings set org.gnome.desktop.interface gtk-theme \\"Yaru\\"\\nfi\\n```"},{"id":"/2025/01/24/Annotated and lightweight tags","metadata":{"permalink":"/til/2025/01/24/Annotated and lightweight tags","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2025-01-24-Annotated and lightweight tags.md","source":"@site/til/2025-01-24-Annotated and lightweight tags.md","title":"Annotated and lightweight tags","description":"Git has two kinds of tags: annotated and lightweight.","date":"2025-01-24T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/til/tags/git"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["git"]},"unlisted":false,"prevItem":{"title":"DDC/CI","permalink":"/til/2025/02/05/ddc-ci"},"nextItem":{"title":"interactive-widget","permalink":"/til/2024/03/27/interactive-widget"}},"content":"Git has [two kinds of tags](https://git-scm.com/book/en/v2/Git-Basics-Tagging): _annotated_ and _lightweight_.\\n\\n- An annotated tag is stored as an object. It contains the name of the user who created it (the _tagger_), it can be signed, etc.\\n- A lightweight tag is like a branch that doesn\'t change.\\n\\nAlthough using one kind or the other doesn\'t change anything most of the times, there are cases where knowing the difference is useful. GitHub Actions for instance, has a different behaviour for the two: when we push a **lightweight** tag which is on the latest commit of branch `main`, `github.event.base_ref` contains `refs/heads/main`. This allows us to run a workflow on new tags only created on the main branch:\\n\\n```yaml\\non:\\n  push:\\n    tags:\\n      - \\"v[0-9]+.[0-9]+.[0-9]+\\"\\n\\njobs:\\n  build-website:\\n    if: github.event.base_ref == \'refs/heads/main\'\\n    ...\\n```\\n\\nHowever, **this doesn\'t work if the tag is annotated**.\\n\\nCommands like `npm version` create annotated tags, so we can just add a `postversion` script in `package.json` to convert the newly created annotated tag to a lightweight one:\\n\\n```bash\\ntag=$(git tag --points-at HEAD)\\n\\ngit tag -d \\"$tag\\"\\ngit tag \\"$tag\\" HEAD\\n```\\n\\nSee the whole files at [github.com/Zwyx/library-of-babel](https://github.com/Zwyx/library-of-babel)."},{"id":"/2024/03/27/interactive-widget","metadata":{"permalink":"/til/2024/03/27/interactive-widget","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2024-03-27-interactive-widget.mdx","source":"@site/til/2024-03-27-interactive-widget.mdx","title":"interactive-widget","description":"The viewport meta tag option interactive-widget allows us to choose what the browser should do with our page when some overlay elements \u2014 such as a phone on-screen keyboard \u2014 appear:","date":"2024-03-27T00:00:00.000Z","tags":[{"inline":true,"label":"viewport","permalink":"/til/tags/viewport"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["viewport"]},"unlisted":false,"prevItem":{"title":"Annotated and lightweight tags","permalink":"/til/2025/01/24/Annotated and lightweight tags"},"nextItem":{"title":"Fast integer-to-string conversion","permalink":"/til/2024/02/01/Fast integer-to-string conversion"}},"content":"The `viewport` meta tag option `interactive-widget` allows us to choose what the browser should do with our page when some overlay elements \u2014 such as a phone on-screen keyboard \u2014 appear:\\n\\nimport { Image } from \\"@site/src/components/Image\\";\\nimport libraryOfBabel from \\"./2024-03-27-interactive-widget-babel.webp\\";\\nimport interactiveWidgetOptionComparison from \\"./2024-03-27-interactive-widget-visual-comparison-all.webp\\";\\n\\n<Image\\n\\tsrc={interactiveWidgetOptionComparison}\\n\\talt=\\"interactive-widget options comparison\\"\\n\\tlegend={\\n\\t\\t<>\\n\\t\\t\\t<code>interactive-widget</code> options comparison. The difference between{\\" \\"}\\n\\t\\t\\t<code>resizes-visual</code> and <code>overlays-content</code> is that{\\" \\"}\\n\\t\\t\\t<code>resizes-visual</code> allows the user to scroll the page up to see\\n\\t\\t\\tthe sticky element at the bottom, whereas <code>overlays-content</code>{\\" \\"}\\n\\t\\t\\tdoesn\'t.\\n\\t\\t</>\\n\\t}\\n/>\\n\\nChrome\'s default behaviour on Android, before version 108, was `resizes-content` \u2014 it is now `resizes-visual`.\\n\\nFor example, the [Library of Babel](https://babel.zwyx.dev/)\'s `viewport` meta tag is now:\\n\\n```html\\n<meta\\n\\tname=\\"viewport\\"\\n\\tcontent=\\"width=device-width, initial-scale=1.0, interactive-widget=resizes-content\\"\\n/>\\n```\\n\\nThis allows the sticky pagination component to be always visible when the on-screen keyboard is open:\\n\\n<div style={{ textAlign: \\"center\\" }}>\\n\\n<Image\\n\\tsrc={libraryOfBabel}\\n\\talt=\\"Example on the Library of Babel\\"\\n\\twidth={350}\\n\\tlegend={\\n\\t\\t<>\\n\\t\\t\\tThe keyboard is{\\" \\"}\\n\\t\\t\\t<a\\n\\t\\t\\t\\thref=\\"https://github.com/dessalines/thumb-key\\"\\n\\t\\t\\t\\ttarget=\\"_blank\\"\\n\\t\\t\\t\\trel=\\"noopener noreferrer\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\tThumb-Key\\n\\t\\t\\t</a>\\n\\t\\t\\t.\\n\\t\\t</>\\n\\t}\\n/>\\n\\n</div>\\n\\nWithout `interactive-widget`, scrolling down while the keyboard was open made the sticky pagination component to disappear.\\n\\nRead more at [developer.chrome.com/blog/viewport-resize-behavior](https://developer.chrome.com/blog/viewport-resize-behavior) (which is the source of the comparison image above)."},{"id":"/2024/02/01/Fast integer-to-string conversion","metadata":{"permalink":"/til/2024/02/01/Fast integer-to-string conversion","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2024-02-01-Fast integer-to-string conversion.md","source":"@site/til/2024-02-01-Fast integer-to-string conversion.md","title":"Fast integer-to-string conversion","description":"This content kept growing, so it has been moved into a blog post.","date":"2024-02-01T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/til/tags/javascript"},{"inline":true,"label":"v8","permalink":"/til/tags/v-8"},{"inline":true,"label":"string","permalink":"/til/tags/string"},{"inline":true,"label":"integer","permalink":"/til/tags/integer"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["javascript","v8","string","integer"]},"unlisted":false,"prevItem":{"title":"interactive-widget","permalink":"/til/2024/03/27/interactive-widget"},"nextItem":{"title":"Fast string-to-integer conversion","permalink":"/til/2023/12/31/Fast string-to-integer conversion"}},"content":"This content kept growing, so it has been moved into a [blog post](/blog/base-conversions-with-big-numbers-in-javascript)."},{"id":"/2023/12/31/Fast string-to-integer conversion","metadata":{"permalink":"/til/2023/12/31/Fast string-to-integer conversion","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2023-12-31-Fast string-to-integer conversion.md","source":"@site/til/2023-12-31-Fast string-to-integer conversion.md","title":"Fast string-to-integer conversion","description":"This content kept growing, so it has been moved into a blog post.","date":"2023-12-31T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/til/tags/javascript"},{"inline":true,"label":"v8","permalink":"/til/tags/v-8"},{"inline":true,"label":"string","permalink":"/til/tags/string"},{"inline":true,"label":"integer","permalink":"/til/tags/integer"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["javascript","v8","string","integer"]},"unlisted":false,"prevItem":{"title":"Fast integer-to-string conversion","permalink":"/til/2024/02/01/Fast integer-to-string conversion"},"nextItem":{"title":"GPU rasterization in Chrome","permalink":"/til/2023/06/30/GPU rasterization in Chrome"}},"content":"This content kept growing, so it has been moved into a [blog post](/blog/base-conversions-with-big-numbers-in-javascript)."},{"id":"/2023/06/30/GPU rasterization in Chrome","metadata":{"permalink":"/til/2023/06/30/GPU rasterization in Chrome","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2023-06-30-GPU rasterization in Chrome.md","source":"@site/til/2023-06-30-GPU rasterization in Chrome.md","title":"GPU rasterization in Chrome","description":"In case of weird text rendering issues in Chrome looking like this:","date":"2023-06-30T00:00:00.000Z","tags":[{"inline":true,"label":"chrome","permalink":"/til/tags/chrome"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["chrome"]},"unlisted":false,"prevItem":{"title":"Fast string-to-integer conversion","permalink":"/til/2023/12/31/Fast string-to-integer conversion"},"nextItem":{"title":"xclip and xsel","permalink":"/til/2023/01/12/xclip and xsel"}},"content":"In case of weird text rendering issues in Chrome looking like this:\\n\\n![Text issue](2023-06-30-GPU-rasterization-in-Chrome.webp)\\n\\nchanche `chrome://flags/#enable-gpu-rasterization` from `Default` to `Disabled`.\\n\\n(It\'s actually happening very rarely for me, so I put back the setting to `Default`.)"},{"id":"/2023/01/12/xclip and xsel","metadata":{"permalink":"/til/2023/01/12/xclip and xsel","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2023-01-12-xclip and xsel.md","source":"@site/til/2023-01-12-xclip and xsel.md","title":"xclip and xsel","description":"xclip is a command line utility to get or set content in the X selection or clipboard.","date":"2023-01-12T00:00:00.000Z","tags":[{"inline":true,"label":"xclip","permalink":"/til/tags/xclip"},{"inline":true,"label":"xsel","permalink":"/til/tags/xsel"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["xclip","xsel"]},"unlisted":false,"prevItem":{"title":"GPU rasterization in Chrome","permalink":"/til/2023/06/30/GPU rasterization in Chrome"},"nextItem":{"title":"inotify watches","permalink":"/til/2022/12/19/inotify watches"}},"content":"`xclip` is a command line utility to get or set content in the X selection or clipboard.\\n\\nIt has a strange side effect when used to set things in the clipboard, it make the terminal to hang for a couple of seconds when closed, and more annoyingly it prevent Sublime Merge to terminate a command making use of it. This is probably linked to the fact that `xclip` starts a background process and leaves it running, as it is necessary for when the clipboard content is retrieved.\\n\\nAfter tinkering with it, I wasn\'t able make it work better. However I discovered `xsel`, which doesn\'t the same things without this unwanted side effect."},{"id":"/2022/12/19/inotify watches","metadata":{"permalink":"/til/2022/12/19/inotify watches","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2022-12-19-inotify watches.md","source":"@site/til/2022-12-19-inotify watches.md","title":"inotify watches","description":"Check how many inotify watches are being used:","date":"2022-12-19T00:00:00.000Z","tags":[{"inline":true,"label":"inotify","permalink":"/til/tags/inotify"},{"inline":true,"label":"file system","permalink":"/til/tags/file-system"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["inotify","file system"]},"unlisted":false,"prevItem":{"title":"xclip and xsel","permalink":"/til/2023/01/12/xclip and xsel"},"nextItem":{"title":"rsync and file renames","permalink":"/til/2022/12/19/rsync and file renames"}},"content":"Check how many inotify watches are being used:\\n\\n```bash\\n#!/bin/bash\\n\\n# Get the procs sorted by the number of inotify watches\\n# @author Carl-Erik Kopseng\\n# @latest https://github.com/fatso83/dotfiles/blob/master/utils/scripts/inotify-consumers\\n# Discussion leading up to answer: https://unix.stackexchange.com/questions/15509/whos-consuming-my-inotify-resources\\n#\\n# If you need ultimate speed, use https://github.com/fatso83/dotfiles/commit/inotify-consumers-v1-fastest\\n# # Speed enhancements by Simon Matter <simon.matter@invoca.ch>\\n#\\n# A later PR introduced a significant slowdown to gain better output, but it is insignificant on most machines\\n# See this for details: https://github.com/fatso83/dotfiles/pull/10#issuecomment-1122374716\\n\\nmain(){\\n    printf \\"\\\\n%${WLEN}s  %${WLEN}s\\\\n\\" \\"INOTIFY\\" \\"INSTANCES\\"\\n    printf \\"%${WLEN}s  %${WLEN}s\\\\n\\" \\"WATCHES\\" \\"PER   \\"\\n    printf \\"%${WLEN}s  %${WLEN}s  %s\\\\n\\" \\" COUNT \\" \\"PROCESS \\"    \\"PID USER         COMMAND\\"\\n    printf -- \\"------------------------------------------------------------\\\\n\\"\\n    generateData\\n}\\n\\nusage(){\\n    cat << EOF\\nUsage: $0 [--help|--limits]\\n    -l, --limits    Will print the current related limits and how to change them\\n    -h, --help      Show this help\\nFYI:  Check out Michael Sartain\'s C++ take on this script. The native executable\\n      is much faster, modern and feature rich. It can be found at\\n      https://github.com/mikesart/inotify-info\\nEOF\\n}\\n\\nlimits(){\\n    printf \\"\\\\nCurrent limits\\\\n-------------\\\\n\\"\\n    sysctl fs.inotify.max_user_instances fs.inotify.max_user_watches\\n\\n    cat <<- EOF\\nChanging settings permanently\\n-----------------------------\\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\\nsudo sysctl -p # re-read config\\nEOF\\n}\\n\\ngenerateData() {\\n    local -i PROC\\n    local -i PID\\n    local -i CNT\\n    local -i INSTANCES\\n    local -i TOT\\n    local -i TOTINSTANCES\\n    # read process list into cache\\n    local PSLIST=\\"$(ps ax -o pid,user=WIDE-COLUMN,command $COLSTRING)\\"\\n    local INOTIFY=\\"$(find /proc/[0-9]*/fdinfo -type f 2>/dev/null | xargs grep ^inotify 2>/dev/null)\\"\\n    local INOTIFYCNT=\\"$(echo \\"$INOTIFY\\" | cut -d \\"/\\" -s --output-delimiter=\\" \\"  -f 3 |uniq -c | sed -e \'s/:.*//\')\\"\\n    # unique instances per process is denoted by number of inotify FDs\\n    local INOTIFYINSTANCES=\\"$(echo \\"$INOTIFY\\" | cut -d \\"/\\" -s --output-delimiter=\\" \\"   -f 3,5 | sed -e \'s/:.*//\'| uniq |awk \'{print $1}\' |uniq -c)\\"\\n    local INOTIFYUSERINSTANCES=\\"$(echo \\"$INOTIFY\\" | cut -d \\"/\\" -s --output-delimiter=\\" \\"   -f 3,5 | sed -e \'s/:.*//\' | uniq |\\n    \\t     while read PID FD; do echo $PID $FD $(grep -e \\"^ *${PID} \\" <<< \\"$PSLIST\\"|awk \'{print $2}\'); done | cut -d\\" \\"  -f 3 | sort | uniq -c |sort -nr)\\"\\n    set -e\\n\\n    cat <<< \\"$INOTIFYCNT\\" |\\n        {\\n            while read -rs CNT PROC; do   # count watches of processes found\\n                echo \\"${PROC},${CNT},$(echo \\"$INOTIFYINSTANCES\\" | grep \\" ${PROC}$\\" |awk \'{print $1}\')\\"\\n            done\\n        } |\\n        grep -v \\",0,\\" |                  # remove entires without watches\\n        sort -n -t \\",\\" -k 2,3 -r |         # sort to begin with highest numbers\\n        {                                # group commands so that $TOT is visible in the printf\\n\\t    IFS=\\",\\"\\n            while read -rs PID CNT INSTANCES; do   # show watches and corresponding process info\\n                printf \\"%$(( WLEN - 2 ))d  %$(( WLEN - 2 ))d     %s\\\\n\\" \\"$CNT\\" \\"$INSTANCES\\" \\"$(grep -e \\"^ *${PID} \\" <<< \\"$PSLIST\\")\\"\\n                TOT=$(( TOT + CNT ))\\n\\t\\tTOTINSTANCES=$(( TOTINSTANCES + INSTANCES))\\n            done\\n\\t    # These stats should be per-user as well, since inotify limits are per-user..\\n            printf \\"\\\\n%$(( WLEN - 2 ))d  %s\\\\n\\" \\"$TOT\\" \\"WATCHES TOTAL COUNT\\"\\n# the total across different users is somewhat meaningless, not printing for now.\\n#            printf \\"\\\\n%$(( WLEN - 2 ))d  %s\\\\n\\" \\"$TOTINSTANCES\\" \\"TOTAL INSTANCES COUNT\\"\\n        }\\n    echo \\"\\"\\n    echo \\"INotify instances per user (e.g. limits specified by fs.inotify.max_user_instances): \\"\\n    echo \\"\\"\\n    (\\n      echo \\"INSTANCES    USER\\"\\n      echo \\"-----------  ------------------\\"\\n      echo \\"$INOTIFYUSERINSTANCES\\"\\n    ) | column -t\\n    echo \\"\\"\\n    exit 0\\n}\\n\\n# get terminal width\\ndeclare -i COLS=$(tput cols 2>/dev/null || echo 80)\\ndeclare -i WLEN=10\\ndeclare COLSTRING=\\"--columns $(( COLS - WLEN ))\\" # get terminal width\\n\\nif [ \\"$1\\" = \\"--limits\\" -o \\"$1\\" = \\"-l\\" ]; then\\n    limits\\n    exit 0\\nfi\\n\\nif [ \\"$1\\" = \\"--help\\" -o \\"$1\\" = \\"-h\\" ]; then\\n    usage\\n    exit 0\\nfi\\n\\n# added this line and moved some declarations to allow for the full display instead of a truncated version\\nif [ \\"$1\\" = \\"--full\\" -o \\"$1\\" = \\"-f\\" ]; then\\n    unset COLSTRING\\n    main\\nfi\\n\\nif [ -n \\"$1\\" ]; then\\n    printf \\"\\\\nUnknown parameter \'$1\'\\\\n\\" >&2\\n    usage\\n    exit 1\\nfi\\nmain\\n```\\n\\nhttps://github.com/fatso83/dotfiles/blob/master/utils/scripts/inotify-consumers"},{"id":"/2022/12/19/rsync and file renames","metadata":{"permalink":"/til/2022/12/19/rsync and file renames","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2022-12-19-rsync and file renames.md","source":"@site/til/2022-12-19-rsync and file renames.md","title":"rsync and file renames","description":"rsync doesn\'t handle file/folder renames well: if a folder containing lots of big files (a photos/videos library) is renamed in the source, then the existing files in the destination will be deleted, and all files will be copied again to the destination.","date":"2022-12-19T00:00:00.000Z","tags":[{"inline":true,"label":"rsync","permalink":"/til/tags/rsync"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["rsync"]},"unlisted":false,"prevItem":{"title":"inotify watches","permalink":"/til/2022/12/19/inotify watches"},"nextItem":{"title":"JSON stringify circular references","permalink":"/til/2022/12/05/JSON stringify circular references"}},"content":"`rsync` doesn\'t handle file/folder renames well: if a folder containing lots of big files (a photos/videos library) is renamed in the source, then the existing files in the destination will be deleted, and all files will be copied again to the destination.\\n\\n[Unison](https://github.com/bcpierce00/unison) appears to handle file renames, but what it actually does is detecting that the files already exist in the destination, and making a copy of them in the destination, from the destination. This saves bandwidth, but is still slow and will stress hard drives for no reason.\\n\\nA tool made by one single person addresses this issue perfectly: [`rsync-sidekick`](https://github.com/m-manu/rsync-sidekick)\\n\\nThe author mentions that the tool doesn\'t make any changes, but to make sure of it, we can run it in a Docker container with readonly volumes. It will output a list of commands to rename and move stuff in the destination to reproduce the renames/moves made in the source.\\n\\n### Usage\\n\\n- Build the container:\\n\\n```bash\\ndocker build -t rsync-sidekick .\\n```\\n\\n- Run it:\\n\\n```bash\\ndocker run --rm \\\\\\n\\t-v /<source-path>:/sync-src:ro \\\\\\n\\t-v /<destination-path>:/sync-dst:ro \\\\\\n\\trsync-sidekick \\\\\\n\\t/bin/bash -c \\"rsync-sidekick -shellscript /sync-src/ /sync-dst/ && echo && cat sync_actions_*.sh\\"\\n```\\n\\n- Retrieve the output, check it visually, replace `sync-src` and `sync-dst`, and run it.\\n\\n- Run `rsync` on dry-run:\\n\\n```sh\\nrsync -ruvin /<source-path>/ /<destination-path>/\\n```\\n\\n- Check the output; if all is ok, run `rsync`:\\n\\n```sh\\nrsync -ruvi /<source-path>/ /<destination-path>/\\n```\\n\\n### Remote directories\\n\\n`rsync-sidekick` only supports local directories at the moment, so to use it with a remote one, we need to mount the directory locally. Example with SSH:\\n\\n```sh\\nmkdir ~/remote-dir\\nsshfs <server>:/<path-on-server> ~/remote-dir\\n```\\n\\nThen you can use `~/remote-dir` as a local directory.\\n\\nTo unmount it, run:\\n\\n```sh\\nfusermount -u ~/remote-dir\\n```"},{"id":"/2022/12/05/JSON stringify circular references","metadata":{"permalink":"/til/2022/12/05/JSON stringify circular references","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2022-12-05-JSON stringify circular references.md","source":"@site/til/2022-12-05-JSON stringify circular references.md","title":"JSON stringify circular references","description":"Not really a TIL, but more a knack","date":"2022-12-05T00:00:00.000Z","tags":[{"inline":true,"label":"json","permalink":"/til/tags/json"},{"inline":true,"label":"stringify","permalink":"/til/tags/stringify"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["json","stringify"]},"unlisted":false,"prevItem":{"title":"rsync and file renames","permalink":"/til/2022/12/19/rsync and file renames"},"nextItem":{"title":"wget for FTP","permalink":"/til/2022/11/23/wget for FTP"}},"content":"Not really a TIL, but more a knack: stringify an object containing circular references:\\n\\n```js\\nconst safeStringify = (obj, indent = 2) => {\\n\\tlet cache = [];\\n\\tconst retVal = JSON.stringify(\\n\\t\\tobj,\\n\\t\\t(key, value) =>\\n\\t\\t\\ttypeof value === \\"object\\" && value !== null\\n\\t\\t\\t\\t? cache.includes(value)\\n\\t\\t\\t\\t\\t? undefined // Duplicate reference found, discard key\\n\\t\\t\\t\\t\\t: cache.push(value) && value // Store value in our collection\\n\\t\\t\\t\\t: value,\\n\\t\\tindent,\\n\\t);\\n\\tcache = null;\\n\\treturn retVal;\\n};\\n```\\n\\nUse like:\\n\\n```js\\nconsole.log(safeStringify(event));\\n```\\n\\nFrom [here](https://stackoverflow.com/questions/11616630/how-can-i-print-a-circular-structure-in-a-json-like-format)."},{"id":"/2022/11/23/wget for FTP","metadata":{"permalink":"/til/2022/11/23/wget for FTP","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/til/2022-11-23-wget for FTP.md","source":"@site/til/2022-11-23-wget for FTP.md","title":"wget for FTP","description":"Download the content of an FTP folder with wget:","date":"2022-11-23T00:00:00.000Z","tags":[{"inline":true,"label":"wget","permalink":"/til/tags/wget"},{"inline":true,"label":"ftp","permalink":"/til/tags/ftp"},{"inline":true,"label":"cli","permalink":"/til/tags/cli"},{"inline":true,"label":"command","permalink":"/til/tags/command"}],"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["wget","ftp","cli","command"]},"unlisted":false,"prevItem":{"title":"JSON stringify circular references","permalink":"/til/2022/12/05/JSON stringify circular references"}},"content":"Download the content of an FTP folder with `wget`:\\n\\n```bash\\nwget --user=<username> --ask-password -r ftp://<url>\\n```\\n\\nAlthough it took minutes to download 10 MB..."}]}}')}}]);